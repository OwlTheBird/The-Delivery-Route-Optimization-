import itertools
import math

def calculate_distance(p1, p2):
    """Calculate Euclidean distance between two points"""
    return math.sqrt((p2[0] - p1[0])*2 + (p2[1] - p1[1])*2)

def min_delivery_route(locations):
    """Calculate shortest route to visit all points and return to start"""
    if len(locations) != 4:
        print("Error: Exactly 4 points required!")
        return None
    
    start = locations[0]
    other_points = locations[1:]
    min_distance = float('inf')
    
    for perm in itertools.permutations(other_points):
        current_distance = 0
        previous_point = start
        
        for point in perm:
            current_distance += calculate_distance(previous_point, point)
            previous_point = point
        
        current_distance += calculate_distance(previous_point, start)
        
        if current_distance < min_distance:
            min_distance = current_distance
    
    return round(min_distance)

def get_user_input():
    """Get exactly 4 coordinate points from user"""
    locations = []
    print("Enter exactly 4 delivery points (as x y coordinates):")
    
    for i in range(4):
        while True:
            coords = input(f"Enter point {i+1} (x y): ").strip()
            try:
                x, y = map(int, coords.split())
                locations.append((x, y))
                break
            except:
                print("Invalid format! Please enter two integers separated by space (e.g., '0 1')")
    
    return locations

def main():
    """Main program function"""
    print("\nDelivery Route Optimization Calculator")
    print("------------------------------------")
    print("This program calculates the shortest route for exactly 4 delivery points")
    print("Enter coordinates as integer pairs separated by space (e.g., '0 1')\n")
    
    locations = get_user_input()
    
    print("\nEntered points:")
    for i, point in enumerate(locations, 1):
        print(f"{i}. ({point[0]}, {point[1]})")
    
    shortest_route = min_delivery_route(locations)
    if shortest_route is not None:
        print(f"\nShortest possible route distance: {shortest_route} units")

if _name_ == "_main_":
    main()
